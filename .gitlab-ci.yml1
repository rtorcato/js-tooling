stages:
- dependencies
- debug
- lint
- verify-release
- release

####################################################

workflow:
  rules:
  # Prevent loop from semantic-release
  - if: '$CI_COMMIT_MESSAGE =~ /(\[ci skip\]|\[skip ci\])/i'
    when: never

  # Only run pipeline for specific branches
  - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "ci-testing"'
    when: always
  # skip if message contains [ci skip] or [skip ci]
  # - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "ci-testing" # Run for specific branches
  # - if: '$CI_COMMIT_MESSAGE =~ /(\[ci skip\]|\[skip ci\])/i'
  #   when: never
  # - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG
  #   when: always
  # - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH
  #   when: always

  ####################################################

dependencies:
  stage: dependencies
  image: node:20.5-alpine
  script:
  - set -e
  - npm install -g pnpm
  - pnpm install --store .pnpm-store
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - .pnpm-store
    - node_modules/
    - /usr/local/bin/pnpm # Cache the global pnpm binary
####################################################

debug:
  stage: debug
  image: node:20.5-alpine
  script:
  - |
    echo "CI_COMMIT_BRANCH: $CI_COMMIT_BRANCH"
    echo "CI_COMMIT_TAG: $CI_COMMIT_TAG"
    echo "CI_COMMIT_MESSAGE: $CI_COMMIT_MESSAGE"
  - if [ -n "$NPM_TOKEN" ]; then echo "NPM_TOKEN is set"; else echo "NPM_TOKEN is not set"; fi
  - if [ -n "$GITLAB_TOKEN" ]; then echo "GITLAB_TOKEN is set"; else echo "GITLAB_TOKEN is not set"; fi

####################################################

lint:
  stage: lint
  image: node:20.5-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - .pnpm-store
    - node_modules/
    - /usr/local/bin/pnpm # Reuse the cached pnpm binary
  script:
  - set -e
  - npm install -g pnpm
  - pnpm lint
  ####################################################

  # debug:
  #   stage: debug
  #   image: node:20.5-alpine
  #   script:
  #   - |
  #     echo "CI_COMMIT_BRANCH: $CI_COMMIT_BRANCH"
  #     echo "CI_COMMIT_TAG: $CI_COMMIT_TAG"
  #     echo "CI_COMMIT_MESSAGE: $CI_COMMIT_MESSAGE"
  # #   - if [ -n "$GITLAB_TOKEN" ]; then echo "GITLAB_TOKEN is set"; else echo "GITLAB_TOKEN is not set"; fi

  ####################################################

  # test:
  #   stage: test
  #   image: node:20.5-alpine
  #   cache:
  #     key: ${CI_COMMIT_REF_SLUG}
  #     paths:
  #     - .pnpm-store
  #     - node_modules/
  #     - /usr/local/bin/pnpm # Reuse the cached pnpm binary
  #   script:
  #   - set -e
  #   - npm install -g pnpm
  #   - pnpm test

  ####################################################

  # build:
  #   stage: build
  #   image: node:20.5-alpine
  #   cache:
  #     key: ${CI_COMMIT_REF_SLUG}
  #     paths:
  #     - .pnpm-store
  #     - node_modules/
  #     - /usr/local/bin/pnpm # Reuse the cached pnpm binary
  #   script:
  #   - set -e
  #   - npm install -g pnpm
  #   - pnpm build-prod
  #   artifacts:
  #     paths:
  #     - dist/
  #     - package.json
  #     - README.md
  #     - .npmrc
  #     expire_in: 1 week

  ####################################################
  # it's a dry run for publish stage
verify-release:
  stage: verify-release
  image: node:20.8-alpine
  before_script:
  - apk add --no-cache git # Install git
  - apt-get update && apt-get install -y jq # this will break!!!!
  - apk add --no-cache jq # Install jq required for fix-bins.sh
  # - apt-get update && apt-get install -y bash # Install bash
  script:
  - set -e
  - npm install -g pnpm
  - pnpm install
  - npx semantic-release --no-ci --dryrun # --debug

publish:
  stage: release
  image: node:20.8-alpine
  # dependencies:
  # - build
  # tags:
  # - specific # Use a specific runner tag if needed
  before_script:
  - apk add --no-cache git # Install git
  - apk add --no-cache jq # Install jq required for fix-bins.sh
  # - apt-get update && apt-get install -y bash # Install bash
  - git tag -l | xargs git tag -d # Clean up local tags
  - git fetch --prune --tags # Fetch remote tags
  script:
  - set -e
  - npm install -g pnpm
  - pnpm install
  - npx semantic-release --no-ci # --debug #
